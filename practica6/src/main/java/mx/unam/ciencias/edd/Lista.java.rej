--- src/main/java/mx/unam/ciencias/edd/Lista.java
+++ src/main/java/mx/unam/ciencias/edd/Lista.java
@@ -1,5 +1,6 @@
 package mx.unam.ciencias.edd;
 
+import java.awt.List;
 import java.util.Comparator;
 import java.util.Iterator;
 import java.util.NoSuchElementException;
@@ -28,7 +29,7 @@ public class Lista<T> implements Coleccion<T> {
 
         /* Construye un nodo con un elemento. */
         public Nodo(T elemento) {
-            // Aquí va su código.
+            this.elemento = elemento;
         }
     }
 
@@ -41,37 +42,51 @@ public class Lista<T> implements Coleccion<T> {
 
         /* Construye un nuevo iterador. */
         public Iterador() {
-            // Aquí va su código.
+            this.anterior = null;
+            this.siguiente = cabeza;
         }
 
         /* Nos dice si hay un elemento siguiente. */
         @Override public boolean hasNext() {
-            // Aquí va su código.
+            return (siguiente != null);
         }
 
         /* Nos da el elemento siguiente. */
         @Override public T next() {
-            // Aquí va su código.
+            if (!hasNext()) {
+                throw new NoSuchElementException();
+            }
+            anterior = siguiente;
+            siguiente = siguiente.siguiente;
+            return anterior.elemento;
         }
 
         /* Nos dice si hay un elemento anterior. */
         @Override public boolean hasPrevious() {
-            // Aquí va su código.
+            return (anterior != null);
         }
 
         /* Nos da el elemento anterior. */
         @Override public T previous() {
-            // Aquí va su código.
+            if (!hasPrevious()) {
+                throw new NoSuchElementException();
+            }else {
+                siguiente = anterior;
+                anterior = siguiente.anterior;
+                return siguiente.elemento;
+            }
         }
 
         /* Mueve el iterador al inicio de la lista. */
         @Override public void start() {
-            // Aquí va su código.
+            anterior = null;
+            siguiente = cabeza;
         }
 
         /* Mueve el iterador al final de la lista. */
         @Override public void end() {
-            // Aquí va su código.
+            anterior = rabo;
+            siguiente = null;
         }
     }
 
@@ -88,7 +103,7 @@ public class Lista<T> implements Coleccion<T> {
      * @return la longitud de la lista, el número de elementos que contiene.
      */
     public int getLongitud() {
-        // Aquí va su código.
+        return longitud;
     }
 
     /**
@@ -97,7 +112,7 @@ public class Lista<T> implements Coleccion<T> {
      * @return el número elementos en la lista.
      */
     @Override public int getElementos() {
-        // Aquí va su código.
+        return longitud;
     }
 
     /**
@@ -106,7 +121,7 @@ public class Lista<T> implements Coleccion<T> {
      *         otro caso.
      */
     @Override public boolean esVacia() {
-        // Aquí va su código.
+        return (longitud == 0);
     }
 
     /**
@@ -118,7 +133,7 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>null</code>.
      */
     @Override public void agrega(T elemento) {
-        // Aquí va su código.
+        agregaFinal(elemento);
     }
 
     /**
@@ -129,7 +144,19 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>null</code>.
      */
     public void agregaFinal(T elemento) {
-        // Aquí va su código.
+        if  (elemento == null) {
+            throw new IllegalArgumentException();
+        }else if (esVacia()) {
+            Nodo aux = new Nodo(elemento);
+            cabeza = rabo = aux;
+            longitud ++;
+        }else {
+            Nodo aux = new Nodo(elemento);
+            rabo.siguiente = aux;
+            aux.anterior = rabo;
+            rabo = aux;
+            longitud ++;
+        }
     }
 
     /**
@@ -140,7 +167,19 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>null</code>.
      */
     public void agregaInicio(T elemento) {
-        // Aquí va su código.
+        if  (elemento == null) {
+            throw new IllegalArgumentException();
+        }else if (esVacia()) {
+            Nodo aux = new Nodo(elemento);
+            cabeza = rabo = aux;
+            longitud ++;
+        }else {
+            Nodo aux = new Nodo(elemento);
+            cabeza.anterior = aux;
+            aux.siguiente = cabeza;
+            cabeza = aux;
+            longitud ++;
+        }
     }
 
     /**
@@ -159,7 +198,24 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>null</code>.
      */
     public void inserta(int i, T elemento) {
-        // Aquí va su código.
+        if (elemento == null) {
+            throw new IllegalArgumentException();
+        }else if (i <= 0) {
+            agregaInicio(elemento);
+        }else if (i >= longitud) {
+            agregaFinal(elemento);
+        }else {
+            Nodo aux = cabeza;
+            for (int j = 0; j < i ; j++) {
+                aux = aux.siguiente;
+            }
+            Nodo aInsertar = new Nodo(elemento);
+            aInsertar.anterior = aux.anterior;
+            aux.anterior.siguiente = aInsertar;
+            aInsertar.siguiente = aux;
+            aux.anterior = aInsertar;
+            longitud ++;
+        }
     }
 
     /**
@@ -168,7 +224,37 @@ public class Lista<T> implements Coleccion<T> {
      * @param elemento el elemento a eliminar.
      */
     @Override public void elimina(T elemento) {
-        // Aquí va su código.
+        if (buscaNodo(elemento) != null) {
+            Nodo n = buscaNodo(elemento);
+            if (n.anterior == null) {
+                eliminaPrimero();
+            }else if (n.siguiente == null) {
+                eliminaUltimo();
+            }else {
+                n.anterior.siguiente = n.siguiente;
+                n.siguiente.anterior = n.anterior;
+                longitud --;
+            }
+
+        }
+    }
+
+    /**
+     *Método auxiliar que dado un elemento, hace una busqueda en 
+     *una lista y regresa el nodo con el elemento a buscar.
+     *@param T elemento a buscar.
+     *@return El nodo con el elemento a buscar.
+     */
+    private Nodo buscaNodo(T elemento) {
+        Nodo n = new Nodo (elemento);
+        Nodo aux = cabeza;
+        while (aux != null) {
+            if (aux.elemento.equals(n.elemento)) {
+                return aux;
+            }
+            aux = aux.siguiente;
+        }
+        return aux;
     }
 
     /**
@@ -177,7 +263,20 @@ public class Lista<T> implements Coleccion<T> {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public T eliminaPrimero() {
-        // Aquí va su código.
+        if (esVacia()) {
+            throw new NoSuchElementException();
+        }else if (cabeza == rabo) {
+            T aux = cabeza.elemento;
+            cabeza = rabo = null;
+            longitud --;
+            return aux;
+        }else {
+            T aux = cabeza.elemento;
+            cabeza.siguiente.anterior = null;
+            cabeza = cabeza.siguiente;
+            longitud --;
+            return aux;
+        }
     }
 
     /**
@@ -186,7 +285,20 @@ public class Lista<T> implements Coleccion<T> {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public T eliminaUltimo() {
-        // Aquí va su código.
+        if (esVacia()){
+            throw new NoSuchElementException();
+        }else if(cabeza == rabo) {
+            T aux = cabeza.elemento;
+            cabeza = rabo = null;
+            longitud --;
+            return aux;
+        }else {
+            T aux = rabo.elemento;
+            rabo.anterior.siguiente = null;
+            rabo = rabo.anterior;
+            longitud --;
+            return aux;
+        }
     }
 
     /**
@@ -196,7 +308,10 @@ public class Lista<T> implements Coleccion<T> {
      *         <tt>false</tt> en otro caso.
      */
     @Override public boolean contiene(T elemento) {
-        // Aquí va su código.
+        if (buscaNodo(elemento) != null) {
+            return true;
+        }
+        return false;
     }
 
     /**
@@ -204,7 +319,13 @@ public class Lista<T> implements Coleccion<T> {
      * @return una nueva lista que es la reversa la que manda llamar el método.
      */
     public Lista<T> reversa() {
-        // Aquí va su código.
+        Lista<T> lista =  new Lista<>();
+        Nodo aux = cabeza;
+        while (aux != null) {
+            lista.agregaInicio(aux.elemento);
+            aux = aux.siguiente;
+        }
+        return lista;
     }
 
     /**
@@ -213,14 +334,21 @@ public class Lista<T> implements Coleccion<T> {
      * @return una copiad de la lista.
      */
     public Lista<T> copia() {
-        // Aquí va su código.
+        Lista<T> lista =  new Lista<>();
+        Nodo aux = cabeza;
+        while (aux != null) {
+            lista.agregaFinal(aux.elemento);
+            aux = aux.siguiente;
+        }
+        return lista;
     }
 
     /**
      * Limpia la lista de elementos, dejándola vacía.
      */
     @Override public void limpia() {
-        // Aquí va su código.
+        cabeza = rabo = null;
+        longitud =0;
     }
 
     /**
@@ -229,7 +357,11 @@ public class Lista<T> implements Coleccion<T> {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public T getPrimero() {
-        // Aquí va su código.
+        if (esVacia()) {
+            throw new NoSuchElementException();
+        }else {
+            return cabeza.elemento;
+        }
     }
 
     /**
@@ -238,7 +370,11 @@ public class Lista<T> implements Coleccion<T> {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public T getUltimo() {
-        // Aquí va su código.
+        if (esVacia()) {
+            throw new NoSuchElementException();
+        }else {
+            return rabo.elemento;
+        }
     }
 
     /**
@@ -249,7 +385,14 @@ public class Lista<T> implements Coleccion<T> {
      *         igual que el número de elementos en la lista.
      */
     public T get(int i) {
-        // Aquí va su código.
+        if (i < 0 || i >= longitud) {
+            throw new ExcepcionIndiceInvalido();
+        }
+        Nodo aux = cabeza;
+        for (int j = 0; j < i ; j++) {
+            aux = aux.siguiente;
+        }
+        return aux.elemento;
     }
 
     /**
@@ -259,7 +402,17 @@ public class Lista<T> implements Coleccion<T> {
      *         no está contenido en la lista.
      */
     public int indiceDe(T elemento) {
-        // Aquí va su código.
+        int indice = 0;
+        Nodo aux = cabeza;
+        while (aux != null) {
+            if (aux.elemento.equals(elemento)) {
+                return indice;
+            }
+            aux = aux.siguiente;
+            indice ++;
+        }
+        indice = -1;
+        return indice;
     }
 
     /**
@@ -267,7 +420,17 @@ public class Lista<T> implements Coleccion<T> {
      * @return una representación en cadena de la lista.
      */
     @Override public String toString() {
-        // Aquí va su código.
+        if (!esVacia()) {
+            Nodo n = cabeza;
+            String representación = "[";
+            while (n != rabo) {
+                representación += String.valueOf(n.elemento) + ", ";
+                n = n.siguiente;
+            }
+            representación += String.valueOf(n.elemento);
+            return representación + "]";
+        }
+        return "[]";
     }
 
     /**
@@ -280,7 +443,19 @@ public class Lista<T> implements Coleccion<T> {
         if (objeto == null || getClass() != objeto.getClass())
             return false;
         @SuppressWarnings("unchecked") Lista<T> lista = (Lista<T>)objeto;
-        // Aquí va su código.
+
+        if (longitud == lista.getLongitud()) {
+            Nodo aux = cabeza;
+            int i = 0;
+            while (aux != null) {
+                if (!aux.elemento.equals(lista.get(i)))
+                    return false;
+                aux = aux.siguiente;
+                 i++;
+            }
+            return true;
+        }
+        return false;
     }
 
     /**
@@ -308,9 +483,49 @@ public class Lista<T> implements Coleccion<T> {
      * @return una copia de la lista, pero ordenada.
      */
     public Lista<T> mergeSort(Comparator<T> comparador) {
-        // Aquí va su código.
+        Lista<T> listaOrdenada =  copia();
+        if (listaOrdenada.longitud <= 1) {
+            return listaOrdenada;
+        }
+        Lista<T> l1 = new Lista<T>();
+        Lista<T> l2 = new Lista<T>();
+        int mitad = (int) Math.floor(listaOrdenada.getLongitud() / 2);
+        for (int i = 0; i < mitad; i++)
+            l1.agrega(listaOrdenada.get(i));
+        for (int j = mitad; j < listaOrdenada.longitud; j++)
+            l2.agrega(listaOrdenada.get(j));
+        
+        l1 = l1.mergeSort(comparador);
+        l2 = l2.mergeSort(comparador);
+        return merge(l1, l2, comparador);
     }
 
+    private Lista<T> merge(Lista<T> l1, Lista<T> l2, Comparator<T> comparador) {
+        Lista<T> list = new Lista<T>();
+        Nodo i = l1.cabeza, j = l2.cabeza;
+        while (i != null  && j != null) {
+            if (comparador.compare(i.elemento, j.elemento) <= 0) {
+                list.agrega(i.elemento);
+                i = i.siguiente;
+            }else {
+                list.agrega(j.elemento);
+                j = j.siguiente;
+            }
+        }
+        if (i == null) {
+            while (j != null) {
+                list.agrega(j.elemento);
+                j = j.siguiente;
+            }
+        }else {
+            while (i != null) {
+                list.agrega(i.elemento);
+                i = i.siguiente;
+            }
+        }
+        return list;
+    }
+    
     /**
      * Regresa una copia de la lista recibida, pero ordenada. La lista recibida
      * tiene que contener nada más elementos que implementan la interfaz {@link
@@ -321,7 +536,7 @@ public class Lista<T> implements Coleccion<T> {
      */
     public static <T extends Comparable<T>>
     Lista<T> mergeSort(Lista<T> lista) {
-        return lista.mergeSort((a, b) -> a.compareTo(b));
+        return (lista.mergeSort((a, b) -> a.compareTo(b)));
     }
 
     /**
@@ -333,7 +548,13 @@ public class Lista<T> implements Coleccion<T> {
      *         <tt>false</tt> en otro caso.
      */
     public boolean busquedaLineal(T elemento, Comparator<T> comparador) {
-        // Aquí va su código.
+        Nodo aux = cabeza;
+        while (aux != null) {
+            if(comparador.compare(aux.elemento, elemento) == 0)
+                return true;
+            aux = aux.siguiente;
+        }
+        return false;
     }
 
     /**
@@ -350,4 +571,4 @@ public class Lista<T> implements Coleccion<T> {
     boolean busquedaLineal(Lista<T> lista, T elemento) {
         return lista.busquedaLineal(elemento, (a, b) -> a.compareTo(b));
     }
-}
+}