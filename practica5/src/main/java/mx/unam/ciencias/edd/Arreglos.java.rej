--- src/main/java/mx/unam/ciencias/edd/Arreglos.java
+++ src/main/java/mx/unam/ciencias/edd/Arreglos.java
@@ -18,7 +18,36 @@ public class Arreglos {
      */
     public static <T> void
     quickSort(T[] arreglo, Comparator<T> comparador) {
-        // Aquí va su código.
+        if (arreglo == null || arreglo.length <= 1)
+            return;
+        sort(arreglo, 0, arreglo.length-1, comparador);
+    }
+
+    private static<T> void
+    sort(T[] arreglo, int inicio, int fin, Comparator<T> comparador) {
+        if (inicio < fin) {
+            int i = inicio, j = fin;
+            T pivote = arreglo[(i + j) / 2];
+
+            while (i <= j) {
+                while (comparador.compare(arreglo[i], pivote) < 0) {
+                    i++;
+                }
+                while (comparador.compare(pivote ,arreglo[j]) < 0) {
+                    j--;
+                }
+                if (i <= j) {
+                    T temp = arreglo[i];
+                    arreglo[i] = arreglo[j];
+                    arreglo[j] = temp;
+                    i++;
+                    j--;
+                }
+            }
+
+            sort(arreglo, inicio, j, comparador);
+            sort(arreglo, i, fin, comparador);
+        }
     }
 
     /**
@@ -39,7 +68,18 @@ public class Arreglos {
      */
     public static <T> void
     selectionSort(T[] arreglo, Comparator<T> comparador) {
-        // Aquí va su código.
+        for (int i = 0; i < arreglo.length -1; i++) {
+            int aux = i;
+            for (int j = i + 1; j < arreglo.length; j++) {
+                if (comparador.compare(arreglo[j], arreglo[aux]) < 0) {
+                    aux = j;
+                }
+            }
+            T temp = arreglo[aux];
+            arreglo[aux] = arreglo[i];
+            arreglo[i] = temp;
+        }
+
     }
 
     /**
@@ -63,7 +103,27 @@ public class Arreglos {
      */
     public static <T> int
     busquedaBinaria(T[] arreglo, T elemento, Comparator<T> comparador) {
-        // Aquí va su código.
+        int inicio = 0, fin = arreglo.length-1;
+        return busquedaRecursiva(arreglo, elemento, inicio, fin, comparador);
+    } 
+
+    private static <T> int 
+    busquedaRecursiva(T[] arreglo, T elemento, int inicio, int fin, Comparator<T> comparador) {
+        if (inicio > fin) {
+            return -1;
+        }
+        int m = (int) Math.floor((inicio + fin) / 2);
+        T element = arreglo[m];
+        if (comparador.compare(element, elemento) == 0) {
+            return m;
+        }else if (comparador.compare(elemento, element) < 0) {
+            fin = m - 1;
+            return busquedaRecursiva(arreglo, elemento, inicio, fin, comparador);
+        }else {
+            inicio = m + 1;
+            return busquedaRecursiva(arreglo, elemento, inicio, fin, comparador);
+        }
+
     }
 
     /**
