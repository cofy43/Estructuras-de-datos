--- src/main/java/mx/unam/ciencias/edd/Dispersores.java
+++ src/main/java/mx/unam/ciencias/edd/Dispersores.java
@@ -14,7 +14,26 @@ public class Dispersores {
      * @return la dispersión de XOR de la llave.
      */
     public static int dispersaXOR(byte[] llave) {
-        // Aquí va su código.
+        int r = 0, j = 0, l = llave.length;
+        //Tomo conjuntos de 4 bytes para realizar la asignación de r
+        //con el operador or
+        while (l >= 4) {
+            r ^= ((llave[j] & 0xFF) << 24) | ((llave[j + 1]  & 0xFF) << 16) | 
+            ((llave[j + 2] & 0xFF) << 8) | ((llave[j + 3] & 0xFF));
+            j += 4;
+            l -= 4;
+        }
+        //En case de que sobren bytes realizo lo mismo
+        //Con los últimos 4 bytes
+        int t = 0;
+        switch (l) {
+            case 3: t |= (llave[j + 2] & 0xFF) << 8;
+            case 2: t |= (llave[j + 1] & 0xFF) << 16;
+            case 1: t |= (llave[j] & 0xFF) << 24;
+        }
+        //Añado el sobrante a r con el operador or
+        r ^= t;
+        return r;
     }
 
     /**
@@ -23,7 +42,55 @@ public class Dispersores {
      * @return la dispersión de Bob Jenkins de la llave.
      */
     public static int dispersaBJ(byte[] llave) {
-        // Aquí va su código.
+        int a = 0x9E3779B9, b = 0x9E3779B9, c = 0xFFFFFFFF, i = 0, n = llave.length, l = n;
+
+        while (l >= 12){
+            a += ((llave[i] & 0xFF)+ ((llave[i+1] & 0xFF)<< 8) + ((llave[i+2] & 0xFF) << 16) + ((llave[i+3] & 0xFF) << 24));
+            b += ((llave[i+4] & 0xFF)+ ((llave[i+5] & 0xFF)<< 8) + ((llave[i+6] & 0xFF) << 16) + ((llave[i+7] & 0xFF) << 24));
+            c += ((llave[i+8] & 0xFF)+ ((llave[i+9] & 0xFF)<< 8) + ((llave[i+10]& 0xFF) << 16) + ((llave[i+11]& 0xFF) << 24));
+
+            a -= b; a -= c; a ^= (c >>> 13);
+            b -= c; b -= a; b ^= (a <<  8);
+            c -= a; c -= b; c ^= (b >>> 13);
+            a -= b; a -= c; a ^= (c >>> 12);
+            b -= c; b -= a; b ^= (a <<  16);
+            c -= a; c -= b; c ^= (b >>> 5);
+            a -= b; a -= c; a ^= (c >>> 3);
+            b -= c; b -= a; b ^= (a <<  10);
+            c -= a; c -= b; c ^= (b >>> 15);
+            
+            i += 12;
+            l -=12;
+        }
+
+        c += n;
+
+        switch (l) {
+            case 11: c += ((llave[i+10]& 0xFF) << 24);
+            case 10: c += ((llave[i+9] & 0xFF) << 16);
+            case  9: c += ((llave[i+8] & 0xFF) << 8);
+        
+            case  8: b += ((llave[i+7] & 0xFF) << 24);
+            case  7: b += ((llave[i+6] & 0xFF) << 16);
+            case  6: b += ((llave[i+5] & 0xFF) << 8);
+            case  5: b +=  (llave[i+4] & 0xFF);
+                
+            case  4: a += ((llave[i+3] & 0xFF) << 24);
+            case  3: a += ((llave[i+2] & 0xFF) << 16);
+            case  2: a += ((llave[i+1] & 0xFF) << 8);
+            case  1: a += (llave[i]& 0xFF);
+        }
+
+        a -= b; a -= c; a ^= (c >>> 13);
+        b -= c; b -= a; b ^= (a <<  8);
+        c -= a; c -= b; c ^= (b >>> 13);
+        a -= b; a -= c; a ^= (c >>> 12);
+        b -= c; b -= a; b ^= (a <<  16);
+        c -= a; c -= b; c ^= (b >>> 5);
+        a -= b; a -= c; a ^= (c >>> 3);
+        b -= c; b -= a; b ^= (a <<  10);
+        c -= a; c -= b; c ^= (b >>> 15);
+        return c;
     }
 
     /**
@@ -33,5 +100,11 @@ public class Dispersores {
      */
     public static int dispersaDJB(byte[] llave) {
         // Aquí va su código.
+        int h = 5381;
+        for (int i = 0; i < llave.length; i++) {
+            int b = (llave[i] & 0xFF);
+            h = h * 33 + b;
+        }
+        return h;
     }
 }
