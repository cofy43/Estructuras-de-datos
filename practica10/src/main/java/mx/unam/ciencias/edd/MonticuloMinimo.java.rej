--- src/main/java/mx/unam/ciencias/edd/MonticuloMinimo.java
+++ src/main/java/mx/unam/ciencias/edd/MonticuloMinimo.java
@@ -13,20 +13,18 @@ public class MonticuloMinimo<T extends ComparableIndexable<T>>
     private class Iterador implements Iterator<T> {
 
         /* Índice del iterador. */
-        private int indice;
+        private int indice = 0;
 
         /* Nos dice si hay un siguiente elemento. */
         @Override public boolean hasNext() {
-            // Aquí va su código.
-	    return indice <elementos;
+            return (this.indice < elementos);
         }
 
         /* Regresa el siguiente elemento. */
         @Override public T next() {
-            // Aquí va su código.
-	    if(!hasNext())
-		throw new NoSuchElementException();
-	    return arbol[indice++];
+            if (indice >= elementos)
+                throw new NoSuchElementException();
+            return arbol[indice++];
         }
     }
 
@@ -41,32 +39,28 @@ public class MonticuloMinimo<T extends ComparableIndexable<T>>
 
         /* Crea un nuevo comparable indexable. */
         public Adaptador(T elemento) {
-            // Aquí va su código.
-	    this.elemento = elemento;
-	    indice = -1;
+            this.elemento = elemento;
+            this.indice = 0;
         }
 
         /* Regresa el índice. */
         @Override public int getIndice() {
-            // Aquí va su código.
-	    return indice;
+            return indice;
         }
 
         /* Define el índice. */
         @Override public void setIndice(int indice) {
-            // Aquí va su código.
-	    this.indice = indice;
+            this.indice = indice;
         }
 
         /* Compara un adaptador con otro. */
         @Override public int compareTo(Adaptador<T> adaptador) {
-            // Aquí va su código.
-	    return elemento.compareTo(adaptador.elemento);
+            return (adaptador.elemento.compareTo(this.elemento));
         }
     }
 
     /* El número de elementos en el arreglo. */
-    private int elementos;
+    private int elementos = 0;
     /* Usamos un truco para poder utilizar arreglos genéricos. */
     private T[] arbol;
 
@@ -108,10 +102,17 @@ public class MonticuloMinimo<T extends ComparableIndexable<T>>
      * @param n el número de elementos en el iterable.
      */
     public MonticuloMinimo(Iterable<T> iterable, int n) {
-        // Aquí va su código.
-	arbol = nuevoArreglo(n);
-	for(T elem : iterable)
-	    agrega(elem);
+        elementos = n;
+        arbol = nuevoArreglo(elementos);
+        int i = 0;
+        for (T e : iterable) {
+            arbol[i] = e;
+            arbol[i].setIndice(i);
+            ++i;
+        }
+        for (int j = (elementos - 1) / 2; j >= 0; j--) {
+            acomodoHaciaAbajo(j);
+        }
     }
 
     /**
@@ -119,17 +120,17 @@ public class MonticuloMinimo<T extends ComparableIndexable<T>>
      * @param elemento el elemento a agregar en el montículo.
      */
     @Override public void agrega(T elemento) {
-        // Aquí va su código.
-	if(elementos == arbol.length){
-	    T[] nuevo = nuevoArreglo(elementos*2);
-	    for(int i = 0 ; i<elementos;i++)
-		nuevo[i] = arbol[i];
-	    arbol = nuevo;
-	}
-	arbol[elementos] = elemento;
-	elemento.setIndice(elementos);
-	elementos++;
-	reordena(elemento);
+        if (this.elementos == arbol.length) {
+            T [] temp = nuevoArreglo(arbol.length*2);
+            for (int i = 0; i < arbol.length; i++) {
+                temp[i] = arbol[i];
+            }
+            this.arbol = temp;
+        }
+
+        arbol[elementos] = elemento;
+        arbol[elementos].setIndice(elementos);
+        acomodoHaciaArriba(elementos++);
     }
 
     /**
@@ -138,16 +139,85 @@ public class MonticuloMinimo<T extends ComparableIndexable<T>>
      * @throws IllegalStateException si el montículo es vacío.
      */
     @Override public T elimina() {
-        // Aquí va su código.
-	if(esVacia())
-	    throw new IllegalStateException();
-	T elimina = arbol[0];
-	intercambia(0,elementos-1);
-	elimina.setIndice(-1);
-	arbol[elementos-1] = null;
-	elementos--;
-	abajo(0);
-	return elimina;
+        if (elementos == 0)
+            throw new IllegalStateException();
+        
+        T aux = arbol[0];
+
+        intercambia(aux, arbol[--elementos]);
+
+        arbol[elementos].setIndice(-1);
+        arbol[elementos] = null;
+
+        acomodoHaciaAbajo(0);
+
+        return aux;
+    }
+
+    private void intercambia(T a, T b) {
+        int i_a = a.getIndice();
+        int i_b = b.getIndice();
+        arbol[i_a] = b;
+        arbol[i_b] = a;
+
+        arbol[i_a].setIndice(i_a);
+        arbol[i_b].setIndice(i_b);
+    }
+
+    private void acomodoHaciaArriba(int i) {
+        int padre = (i - 1) / 2;
+        int menor = i;
+
+        if (padre >= 0 && arbol[padre].compareTo(arbol[i]) > 0)
+            menor = padre;
+
+        if (menor != i) {
+            T aux = arbol[i];
+
+            arbol[i] = arbol[padre];
+            arbol[i].setIndice(i);
+
+            arbol[padre] = aux;
+            arbol[padre].setIndice(padre);
+
+            acomodoHaciaArriba(menor);
+        }
+    }
+
+    private void acomodoHaciaAbajo(int i) {
+        int izq = i * 2 + 1;
+        int der = i * 2 + 2;
+
+        if (izq >= elementos && der >= elementos) {
+            return;
+        }
+
+        int menor = getMenor(izq, der);
+        menor = getMenor(i, menor);
+
+        if (menor != i) {
+            T aux = arbol[i];
+
+            arbol[i] = arbol[menor];
+            arbol[i].setIndice(i);
+
+            arbol[menor] = aux;
+            arbol[menor].setIndice(menor);
+
+            acomodoHaciaAbajo(menor);
+        }
+
+    }
+
+    private int getMenor(int a, int b) {
+        if (b >= elementos) {
+            System.out.println(a);
+            return a;
+        } else if (arbol[a].compareTo(arbol[b]) < 0) {
+            return a;
+        }else {
+            return b;
+        }
     }
 
     /**
@@ -155,26 +225,22 @@ public class MonticuloMinimo<T extends ComparableIndexable<T>>
      * @param elemento a eliminar del montículo.
      */
     @Override public void elimina(T elemento) {
-        // Aquí va su código.
-	int indice = elemento.getIndice();
-	if(indice <0 || indice>= elementos)
-	    return;
-	intercambia(indice,elementos-1);
-	arbol[elementos-1] = null;
-	elemento.setIndice(-1);
-	elementos --;
-	if(arbol[indice]!= null)
-	reordena(arbol[indice]);
-	
-    }
-    private void intercambia(int i, int j){
-	T elei = arbol[i];
-	T elej = arbol[j];
-	elei.setIndice(j);
-	elej.setIndice(i);
-	arbol[i] = elej;
-	arbol[j] = elei;
+        if (elemento.getIndice() < 0 || elemento.getIndice() >= this.elementos || elemento == null)
+            return;
+            
+        int i = elemento.getIndice();
+        T a = arbol[i], b = arbol[--elementos];
+        arbol[i] = b;
+        arbol[i].setIndice(a.getIndice());
+        arbol[elementos] = a;
+        arbol[elementos].setIndice(b.getIndice());
+
+        arbol[elementos].setIndice(-1);
+        arbol[elementos] = null;
+        reordena(arbol[i]);
+
     }
+
     /**
      * Nos dice si un elemento está contenido en el montículo.
      * @param elemento el elemento que queremos saber si está contenido.
@@ -182,11 +248,9 @@ public class MonticuloMinimo<T extends ComparableIndexable<T>>
      *         <code>false</code> en otro caso.
      */
     @Override public boolean contiene(T elemento) {
-        // Aquí va su código.
-	int indice = elemento.getIndice();
-	if(indice<0 || indice >=elementos)
-	    return false;
-	return arbol[indice].equals(elemento);
+        if (elemento.getIndice() < 0 || elemento.getIndice() >= elementos) 
+            return false;
+        return true;
     }
 
     /**
@@ -195,21 +259,17 @@ public class MonticuloMinimo<T extends ComparableIndexable<T>>
      *         <tt>false</tt> en otro caso.
      */
     @Override public boolean esVacia() {
-        // Aquí va su código.
-	return elementos == 0;
+        return (elementos == 0);
     }
 
     /**
      * Limpia el montículo de elementos, dejándolo vacío.
      */
     @Override public void limpia() {
-        // Aquí va su código.
-	for(int i = 0;i<elementos;i++){
-	    arbol[i].setIndice(-1);
-	    arbol[i] = null;
-	}
-	elementos = 0;
-	
+        elementos = 0;
+        for (int i = 0; i < elementos; i++) {
+            arbol[i] = null;
+        }
     }
 
    /**
@@ -217,61 +277,20 @@ public class MonticuloMinimo<T extends ComparableIndexable<T>>
      * @param elemento el elemento que hay que reordenar.
      */
     @Override public void reordena(T elemento) {
-        // Aquí va su código.
-	arriba(elemento.getIndice());
-	abajo(elemento.getIndice());
-    }
-    private void arriba(int indice){
-	if(indice == 0)
-	    return;
-	int padre = (indice-1)/2;
-	if(arbol[padre].compareTo(arbol[indice])>0){
-	    intercambia(padre,indice);
-	    arriba(padre);
-	}
-	
-    }
-    private void abajo(int indice){
-	if(indice>= elementos || indice<0)
-	    return;
-	int izq  = 2*indice+1;
-	int der = 2*indice+2;
-	boolean menorI = false;
-	boolean menorD = false;
-	if(der<elementos)
-	    menorD = arbol[indice].compareTo(arbol[der])>=0;
-	if(izq<elementos)
-            menorI = arbol[indice].compareTo(arbol[izq])>=0;
-	if(menorI && menorD){
-	    int minimo = getMinimo(der,izq);
-	    intercambia(indice,minimo);
-	    abajo(minimo);
-	    return;
-	}
-	if(menorI){
-	    intercambia(indice,izq);
-            abajo(izq);
-	    return;
-	}
-	if(menorD){
-	    intercambia(indice,der);
-            abajo(der);
+        if (elemento == null) {
             return;
-	}
-
-    }
-    private int getMinimo(int i,int j){
-	if(arbol[i].compareTo(arbol[j])<0)
-	    return i;
-	return j;
+        }
+        int i = elemento.getIndice();
+        acomodoHaciaArriba(i);
+        acomodoHaciaAbajo(i);
     }
+
     /**
      * Regresa el número de elementos en el montículo mínimo.
      * @return el número de elementos en el montículo mínimo.
      */
     @Override public int getElementos() {
-        // Aquí va su código.
-	return elementos;
+        return elementos;
     }
 
     /**
@@ -282,10 +301,9 @@ public class MonticuloMinimo<T extends ComparableIndexable<T>>
      *         que el número de elementos.
      */
     @Override public T get(int i) {
-        // Aquí va su código.
-	if(i<0 || i>=elementos)
-	    throw new NoSuchElementException();
-	return arbol[i];
+        if (i < 0 || i >= elementos)
+            throw new NoSuchElementException();
+        return arbol[i];
     }
 
     /**
@@ -293,11 +311,12 @@ public class MonticuloMinimo<T extends ComparableIndexable<T>>
      * @return una representación en cadena del montículo mínimo.
      */
     @Override public String toString() {
-        // Aquí va su código.
-	String monticulo = "";
-	for (int i = 0; i<elementos; i++)
-	    monticulo += String.format("%s, ", arbol[i].toString());
-	return monticulo;
+        String s = "";
+
+        for (int i = 0; i < getElementos(); i++) {
+            s += String.valueOf(get(i).toString()) + ", ";
+        }
+        return s;
     }
 
     /**
@@ -311,13 +330,13 @@ public class MonticuloMinimo<T extends ComparableIndexable<T>>
             return false;
         @SuppressWarnings("unchecked") MonticuloMinimo<T> monticulo =
             (MonticuloMinimo<T>)objeto;
-        // Aquí va su código.
-	if(elementos!= monticulo.elementos)
-	    return false;
-	for(int i = 0; i<elementos;i++)
-	    if(!arbol[i].equals(monticulo.arbol[i]))
-		return false;
-	return true;
+        if (this.elementos != monticulo.elementos)
+            return false;
+        for (int i = 0; i < getElementos(); i++) {
+            if (arbol[i].compareTo(monticulo.get(i)) != 0)
+                return false;
+        }
+        return true;
     }
 
     /**
@@ -337,15 +356,25 @@ public class MonticuloMinimo<T extends ComparableIndexable<T>>
      */
     public static <T extends Comparable<T>>
     Lista<T> heapSort(Coleccion<T> coleccion) {
-        // Aquí va su código.
-	Lista<T> lista = new Lista<T>();
-	MonticuloMinimo<Adaptador<T>> orden = new MonticuloMinimo<Adaptador<T>>();
-	for(T elemento : coleccion){
-	    Adaptador<T> elem = new Adaptador<T> (elemento);
-	    orden.agrega(elem);
-	}
-	while(!orden.esVacia())
-	    lista.agrega(orden.elimina().elemento);
-	return lista;
+        Lista<Adaptador<T>> l1 = new Lista<>();
+
+        for (T t: coleccion) {
+            l1.agrega(new Adaptador<T>(t));
+        }
+
+        Lista<T> l2 = new Lista<>();
+
+        MonticuloMinimo<Adaptador<T>> monticulo = new MonticuloMinimo<>(l1);
+
+        int i = 0;
+        while (!monticulo.esVacia()) {
+            Adaptador<T> aux = monticulo.get(i);
+            monticulo.elimina();
+            l2.agrega(aux.elemento);
+        }
+
+        //Esto esta muy puerco
+        return l2.reversa();
+        
     }
 }
