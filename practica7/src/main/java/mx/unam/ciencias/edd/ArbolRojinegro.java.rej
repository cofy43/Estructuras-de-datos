--- src/main/java/mx/unam/ciencias/edd/ArbolRojinegro.java
+++ src/main/java/mx/unam/ciencias/edd/ArbolRojinegro.java
@@ -31,7 +31,8 @@ public class ArbolRojinegro<T extends Comparable<T>>
          * @param elemento el elemento del vértice.
          */
         public VerticeRojinegro(T elemento) {
-            // Aquí va su código.
+            super(elemento);
+            color = Color.NINGUNO;
         }
 
         /**
@@ -39,7 +40,9 @@ public class ArbolRojinegro<T extends Comparable<T>>
          * @return una representación en cadena del vértice rojinegro.
          */
         public String toString() {
-            // Aquí va su código.
+            if(color == Color.ROJO)
+                return "R{" + elemento.toString() + "}";
+            return "N{" + elemento.toString() + "}";
         }
 
         /**
@@ -57,7 +60,7 @@ public class ArbolRojinegro<T extends Comparable<T>>
                 return false;
             @SuppressWarnings("unchecked")
                 VerticeRojinegro vertice = (VerticeRojinegro)objeto;
-            // Aquí va su código.
+            return (color == vertice.color && super.equals(vertice));
         }
     }
 
@@ -95,7 +98,10 @@ public class ArbolRojinegro<T extends Comparable<T>>
      *         VerticeRojinegro}.
      */
     public Color getColor(VerticeArbolBinario<T> vertice) {
-        // Aquí va su código.
+        if(vertice.getClass() != VerticeRojinegro.class )
+            throw new ClassCastException();
+        VerticeRojinegro v = (VerticeRojinegro) vertice;
+        return v.color;
     }
 
     /**
@@ -105,7 +111,61 @@ public class ArbolRojinegro<T extends Comparable<T>>
      * @param elemento el elemento a agregar.
      */
     @Override public void agrega(T elemento) {
-        // Aquí va su código.
+        super.agrega(elemento);
+        VerticeRojinegro v = (VerticeRojinegro)super.ultimoAgregado;
+        v.color = Color.ROJO;
+        agrega(v);
+    }
+    /**
+     * Funcion auxiliar de agrega.
+     */ 
+    private void agrega(VerticeRojinegro v){
+
+        //Caso 1
+        if(!v.hayPadre()){
+            v.color = Color.NEGRO;
+            return;
+        }
+        //Caso 2
+        VerticeRojinegro p = (VerticeRojinegro)v.padre;
+        if(p.color == Color.NEGRO)
+            return;
+
+        //Caso 3
+        VerticeRojinegro a = (VerticeRojinegro) p.padre;    
+        VerticeRojinegro t = (a.izquierdo != p) ? (VerticeRojinegro)a.izquierdo : (VerticeRojinegro)a.derecho;
+
+        if(t != null && t.color == Color.ROJO){
+            t.color = p.color = Color.NEGRO;
+            a.color = Color.ROJO;
+            agrega(a);
+            return;
+        }
+
+        //Caso 4
+        if(a.izquierdo == p && p.derecho == v){
+            super.giraIzquierda(p);
+            VerticeRojinegro aux = p;
+            p = v;
+            v = aux;
+        
+        }
+        else if(a.derecho == p && p.izquierdo == v){
+            super.giraDerecha(p);
+            VerticeRojinegro aux = p;
+            p = v;
+            v = aux;
+        }
+
+        //Caso 5
+        p.color = Color.NEGRO;
+        a.color = Color.ROJO;
+
+        if(p.izquierdo == v)
+            super.giraDerecha(a);
+        else
+            super.giraIzquierda(a);
+
     }
 
     /**
@@ -115,7 +175,195 @@ public class ArbolRojinegro<T extends Comparable<T>>
      * @param elemento el elemento a eliminar del árbol.
      */
     @Override public void elimina(T elemento) {
-        // Aquí va su código.
+
+        VerticeRojinegro v = busca((VerticeRojinegro)super.raiz, elemento);
+        if(v == null)
+            return;
+        VerticeRojinegro aux = null;
+
+        if(v.hayIzquierdo()){
+            aux = v;
+            v = subMax((VerticeRojinegro)v.izquierdo);
+            aux.elemento = v.get();
+            aux = null;
+        }
+        
+        if(!v.hayIzquierdo() && !v.hayDerecho()){
+            v.izquierdo = nuevoVertice(null);
+            aux = (VerticeRojinegro)v.izquierdo;
+            aux.padre = v;
+            aux.color = Color.NEGRO;
+        }
+        VerticeRojinegro h = (v.hayIzquierdo()) ? (VerticeRojinegro)v.izquierdo : (VerticeRojinegro)v.derecho; 
+        desconecta(v, h);
+
+
+        if(h.color == Color.ROJO || v.color == Color.ROJO){
+            h.color = Color.NEGRO;
+        }
+        else {
+            h.color = Color.NEGRO;
+            balancea(h);
+        }
+
+        if(aux != null){
+            if(!aux.hayPadre()){
+                super.raiz = null;
+                ultimoAgregado = aux = null;
+            }
+            else if(esDerecho(aux)){
+                aux.padre.derecho = null;
+            }
+            else 
+                aux.padre.izquierdo = null;
+        }
+        elementos--;
+    }
+
+    /**
+     * Rebalancea el vertice sobre v
+     */
+    private void balancea(VerticeRojinegro v){
+
+        //Caso 1
+        if(!v.hayPadre()){
+            v.color = Color.NEGRO;
+            raiz = v;
+            return;
+        }
+
+        VerticeRojinegro p = (VerticeRojinegro)v.padre;
+        VerticeRojinegro h = hermano(v);    
+
+        //Caso 2
+        if(h.color == Color.ROJO){
+            p.color = Color.ROJO;
+            h.color = Color.NEGRO;
+            if(esDerecho(v))
+                super.giraDerecha(p);
+            else
+                super.giraIzquierda(p);
+            h = hermano(v);
+            p = (VerticeRojinegro)v.padre;
+        }
+
+        VerticeRojinegro hi = (VerticeRojinegro)h.izquierdo;
+        VerticeRojinegro hd = (VerticeRojinegro)h.derecho;
+        
+
+        //Caso 3
+        if(esNegro(hi) && esNegro(hd) && esNegro(p) && esNegro(h)){
+            h.color = Color.ROJO;
+            balancea(p);
+            return;
+        }
+
+        //Caso 4
+        if(esNegro(hi) && esNegro(hd) && !esNegro(p) && esNegro(h)){
+            h.color = Color.ROJO;
+            p.color = Color.NEGRO;
+            return;
+        }
+
+        //Caso 5
+        if(!esDerecho(v) && !esNegro(hi) && esNegro(hd) && esNegro(h)){
+            h.color = Color.ROJO;
+            hi.color = Color.NEGRO;
+            super.giraDerecha(h);
+            h = hermano(v);
+            hi = (VerticeRojinegro)h.izquierdo;
+            hd = (VerticeRojinegro)h.derecho;
+        }
+        else if(esDerecho(v) && esNegro(hi) && !esNegro(hd) && esNegro(h)){
+            h.color = Color.ROJO;
+            hd.color = Color.NEGRO;
+            super.giraIzquierda(h);
+            h = hermano(v);
+            hi = (VerticeRojinegro)h.izquierdo;
+            hd = (VerticeRojinegro)h.derecho;
+        }
+
+        //Caso 6
+        h.color = p.color;
+        p.color = Color.NEGRO;
+        if(esDerecho(v)){
+            hi.color = Color.NEGRO;
+            super.giraDerecha(p);
+        }
+        else{ 
+            hd.color = Color.NEGRO;
+            super.giraIzquierda(p);
+        }
+    }
+
+    private boolean esNegro(VerticeRojinegro v){
+        return (v == null || v.color == Color.NEGRO);
+    }
+
+    private boolean esDerecho(VerticeRojinegro v){
+        return (v.padre.derecho == v);
+    } 
+
+    /**
+     * Regresa el hermano de v
+     */
+    private VerticeRojinegro hermano(VerticeRojinegro v){
+        if(v.padre.derecho == v)
+            return (VerticeRojinegro)v.padre.izquierdo;
+        else return (VerticeRojinegro)v.padre.derecho;
+    }
+
+    /**
+     * Regresa el primer vértice con elemento e, si no existe
+     * regresa null.
+     */
+    private VerticeRojinegro busca(VerticeRojinegro v, T e){
+        if(v == null)
+            return null;
+        int r = e.compareTo(v.get());
+        if(r == 0)
+            return v;
+        else if(r < 0)
+            return busca((VerticeRojinegro)v.izquierdo, e);
+        else
+            return busca((VerticeRojinegro)v.derecho, e);
+    }
+
+    /**
+     * Regresa el maximo del subarbol a partir de v
+     */
+    private VerticeRojinegro subMax(VerticeRojinegro v){
+
+        if(v.hayDerecho())
+            return subMax((VerticeRojinegro)v.derecho);
+        return v;
+    }
+
+    /**
+     * Desconecta al nodo y pone a su hijo en su lugar
+     */
+    private void desconecta(VerticeRojinegro v, VerticeRojinegro h){
+    
+        if(!v.hayPadre()){
+            raiz = h;
+            raiz.padre = null;
+            return;
+        }
+
+        h.padre = v.padre;
+        if(v.derecho == h){
+            if(!esDerecho(v))
+                v.padre.izquierdo = v.derecho;
+            else
+                v.padre.derecho = v.derecho;
+        }
+        if(v.izquierdo == h){
+            if(!esDerecho(v))
+                v.padre.izquierdo = v.izquierdo;
+            else
+                v.padre.derecho = v.izquierdo;
+        }
+
     }
 
     /**
@@ -143,4 +391,4 @@ public class ArbolRojinegro<T extends Comparable<T>>
                                                 "pueden girar a la derecha " +
                                                 "por el usuario.");
     }
-}
+}